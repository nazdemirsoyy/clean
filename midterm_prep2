/* 1.
    Given two sorted lists, return lists which contains their intersection.
*/

intersection :: [Int] [Int]-> [Int]
intersection list1 list2 = [x \\ x <- list1 | isMember x list2]

//Start = intersection [1,3,4,7,8,12,13] [1,4,6,10,11,12,15] // [1,4,12]
//Start = intersection [1..10] [1..1000] // [1,2,3,4,5,6,7,8,9,10]
//Start = intersection [1,2,3,7,9,12,15,24] [5..30]  // [7,9,12,15,24]
//Start = intersection [] [1..100] // []

/* 2.
    Given an integer, write a function which reverse it's digit, assuming that it does not end with zero.
    1234 -> 4321
*/
intToList::Int -> [Int]
intToList x
|x<10 = [x]
= intToList (x/10) ++ [x rem 10]
//Start = intToList 123

listToInt :: [Int] -> Int
listToInt list = (\[x] = x) (helpf list) 

helpf :: [Int] -> [Int]
helpf [a] = [a]
helpf [x,y:xs] = helpf [(x*10 + y):xs]

reverseInt :: Int -> Int
reverseInt n
|(n rem 10) <> 0 = listToInt (reverse (intToList n))


//Start = reverseInt 123 // 321
//Start = reverseInt 10152 // 25101
//Start = reverseInt 5 // 5

/* 3.
    Write a function which takes a list of Int and returns a list where each number of the list 
    is substituted with the number of its divisors.
*/

substWithNumOfDiv::[Int]->[Int]
substWithNumOfDiv list = [div x \\ x <- list]
where
     div x = length (filter (\y = x rem y == 0) [1..x])
	
//Start=substWithNumOfDiv [3,5,2,34,54,23,14]//[2,2,2,4,8,2,4]
//Start=substWithNumOfDiv [8,8,8,8]//[4,4,4,4]
//Start=substWithNumOfDiv [54,23,1,0]//[8,2,1,0]
//Start=substWithNumOfDiv []//[]

/* 4.
	Write a function which generates a list of the first n leap years starting from
	a year x. If any of the parameters are negative output empty list.
	A leap year is divisible by 4 but is NOT divisible by 100 UNLESS it is divisible by 400.
*/

LeapYears :: Int Int -> [Int]
LeapYears a b
|a<= 0 || b <= 0 = []
|a rem 4 == 0 = [x\\x <-[(a+4),(a+8)..(a+(4*b))]] //in any case if a rem 4 == 0 then its leap year e.g 2000
= [x\\x<- [f1 a, ((f1 a)+4)..((f1 a)+((b-1)*4))]] // if it is not the case then apply another function f1 on the elements of my list
//otherwise if it is not a leap year : apply f1 to my integer in the list
f1::Int -> Int
f1 n
|(n rem 4 == 0 && n rem 100 <> 0) || (n rem 400 == 0)= n
= f1 (n+1)

//////////////////////////
isLeap::Int -> Bool
isLeap x
| x rem 4 <> 0 = False
| x rem 100 <> 0 = True
| x rem 400 <> 0 = False
= True


//Start = LeapYears 1999 4 // [2000,2004,2008,2012]
//Start = LeapYears 1804 7 //[1808,1812,1816,1820,1824,1828,1832]
//Start = LeapYears -2000 4 //[]
//Start = LeapYears 2000 -9//[]


/*  5.
    Find sum square difference of a given integer
    The sum of the squares of the first ten natural numbers is,
    1^2 + 2^2 + ... + 10^2 = 385
    The square of the sum of the first ten natural numbers is,
    (1 + 2 + ... + 10)^2 = 55^2 = 3025
    Hence the difference between the sum of the squares of the first ten natural numbers 
    and the square of the sum is: 3025 - 385 = 2640.
*/

sumOfSquare :: Int -> Int
sumOfSquare n = ((sum [1..n])^2) - sum [x^2 \\ x <- [1..n]]

//Start = sumOfSquare 100 // 25164150
//Start = sumOfSquare 50 // 1582700

/* 6.
    Given a list of Integers. Write a function which will remove the numbers which do not belong to the first 15 Fibonacci numbers.
*/
fib :: Int -> Int
fib n = fibAux 0 1 n

fibAux :: Int Int Int -> Int
fibAux a b n
| n == 0 = a
= fibAux b (a+b) (n-1)

fibList :: Int -> [Int]
fibList n = [fib x \\ x <- [1..15]]

//Start = fibList 15

removeNonFib :: [Int] -> [Int]
removeNonFib ls = [x \\ x <- ls | (isMember x (fibList x))]

//Start = removeNonFib [1,3..20]//[1,3,5,13]
//Start = removeNonFib [2,4,6,8,10]//[2,8]
//Start = removeNonFib [4,6,7,9,10]//[]
//Start = removeNonFib [] //[]

/* 7. 
    Write a function to decide if all the numbers in a list are perfect square.
    INFO : Perfect number is an integer equals to a square of another integer.
    i.e : 9 is a perfect square since 3^2 = 9.
*/

areAllPerfectSquares :: [Int] -> Bool
areAllPerfectSquares ls = foldr (&&) True [(checkSq x) \\ x <- ls ]

//Start = areAllPerfectSquares [1,9,16,25,5]
//Start = areAllPerfectSquares [1, 9, 36, 16] // True
//Start = areAllPerfectSquares [2, 4, 34] // False

checkSq :: Int -> Bool
checkSq n = (sqrt (toReal n) - toReal (toInt (sqrt (toReal n)))) == 0.0

//Start = checkSq 5

//Start = toInt ((sqrt (toReal 34))^2.0)


/* 8.
    Given two numbers, find their common prime divisors.
*/
isPrime :: Int -> Bool
isPrime x = isEmpty [n \\ n<- [2.. (toInt (sqrt (toReal x)))]|x rem n == 0]

//Start = isPrime 17

getCommonPrimeDivs:: Int Int -> [Int]
getCommonPrimeDivs x y = intersection (list x) (list y)

list:: Int -> [Int]
list x = [n \\ n <- [2..x]| (x rem n == 0) && isPrime n] 

//Start = list (7*9*13*17*2)

//Start = getCommonPrimeDivs (7*9*13*17*2) (14*7*3*17*19) // [2,3,7,17]
//Start = getCommonPrimeDivs 1234 7790 // [2]
//Start = getCommonPrimeDivs 124 8139 // []

/* 9.
    Write a function that will do a circle rotation of the numbers in a list of tuples.
    For example:
    rotTups 1 [(1,2),(3,4),(5,6)] will give you [(2,3),(4,5),(6,1)]
*/
rotTups :: Int [(Int,Int)] -> [(Int,Int)]
rotTups n ls = toTup (pls n (toList ls))
where
     toList [(x,y):xs] = [x,y : toList xs]
     toList [] = []
     toTup [x,y:xs] = [(x,y) : toTup xs]
     toTup [] = []
listA :: [Int] -> [Int]
listA ls = (tl ls) ++ [hd ls]
pls :: Int [Int] -> [Int]
pls 1 x = listA x
pls n x = pls (n-1) (listA x)
     
//Start = rotTups 1 [(1,2),(3,4),(5,6)] //[(2,3),(4,5),(6,1)]
//Start = rotTups 3 [(1,2),(3,4),(5,6)] //[(4,5),(6,1),(2,3)]
//Start = rotTups 234 [(1,2),(3,4),(5,6)] //[(1,2),(3,4),(5,6)]  
//Start = rotTups 2378475 [(53,73),(35,71),(52,42),(56,78),(42,69),(457,1367),(32,283623),(-363,4643),(0,0),(35,-279427)] //[(4643,0),(0,35),(-279427,53),(73,35),(71,52),(42,56),(78,42),(69,457),(1367,32),(283623,-363)]  

/* 10.
    Write a function that takes a list of rectangles represented
    as tuples of their side lengths, and then return the largest
    rectangle (tuple) by area. For multiple rectangles (tuples)
    with equal area, return any of them.
    For example:
    largestRect [(1,1),(2,3),(4,6)] should return (4,6) because
    that will give the largest rectangle by area.
    Math hint:
    Given two side lengths, you get the area of a rectangle by
    multiplying the two lengths.
*/

largestRect :: [(Int,Int)] -> (Int,Int)
largestRect [] = (0,0)
largestRect list = hd [ (a,b) \\ (a,b) <- list | a*b == maxList mylist]
where
    mylist = [a*b \\ (a,b) <-list]

//Start = largestRect [] //(0,0)
//Start = largestRect [(420,69)] //(420,69)
//Start = largestRect [(1,1),(2,3),(4,6)] //(4,6)
//Start = largestRect [(1,2),(2,3),(3,4),(2,6),(2,1)] //(2,6)
